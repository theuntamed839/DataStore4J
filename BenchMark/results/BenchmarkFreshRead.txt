java -jar ./target/dbBenchmarks.jar BenchmarkFreshRead -f 1 -wi 1 -i 1 -to 60m -rf json -rff BenchmarkFreshRead.json | tee BenchmarkFreshRead.txt

# JMH version: 1.37
# VM version: JDK 22, OpenJDK 64-Bit Server VM, 22+36-2370
# VM invoker: /home/ganesh/Documents/jdk-22/bin/java
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, single-shot each
# Timeout: 60 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: io.github.theuntamed839.BenchmarkFreshRead.randomSearch
# Parameters: (dbProvider = DATASTORE4J, entryCount = 5000000, keySize = 500, valueSize = 500)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: DataStore4JAdaptor_4812416a-8a0c-414e-b008-feb271fa61d4 Folder size: 5196
79.461 s/op
Iteration   1: DataStore4JAdaptor_3e73fa02-226f-4f6f-87a2-5d412c1e31ee Folder size: 5196
72.444 s/op



# JMH version: 1.37
# VM version: JDK 22, OpenJDK 64-Bit Server VM, 22+36-2370
# VM invoker: /home/ganesh/Documents/jdk-22/bin/java
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, single-shot each
# Timeout: 60 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: io.github.theuntamed839.BenchmarkFreshRead.randomSearch
# Parameters: (dbProvider = ROCKSDB, entryCount = 5000000, keySize = 500, valueSize = 500)

# Run progress: 25.00% complete, ETA 00:16:12
# Fork: 1 of 1
# Warmup Iteration   1: RocksDBAdaptor_af933e1a-8a3c-4315-9866-c56b70c2fda8 Folder size: 4855
70.153 s/op
Iteration   1: RocksDBAdaptor_a215092f-bad7-47ae-904e-5bd9d3c409b6 Folder size: 4855
75.743 s/op



# JMH version: 1.37
# VM version: JDK 22, OpenJDK 64-Bit Server VM, 22+36-2370
# VM invoker: /home/ganesh/Documents/jdk-22/bin/java
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, single-shot each
# Timeout: 60 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: io.github.theuntamed839.BenchmarkFreshRead.randomSearch
# Parameters: (dbProvider = LEVELDB_JAVA, entryCount = 5000000, keySize = 500, valueSize = 500)

# Run progress: 50.00% complete, ETA 00:09:41
# Fork: 1 of 1
# Warmup Iteration   1: PureJavaLevelDBAdaptor_154e1b6f-4e13-4d5b-b7fe-a37aaae0a1cb Folder size: 4990
331.957 s/op
Iteration   1: PureJavaLevelDBAdaptor_fd1f701e-172c-4df0-905c-1611191ba634 Folder size: 4990
353.250 s/op



# JMH version: 1.37
# VM version: JDK 22, OpenJDK 64-Bit Server VM, 22+36-2370
# VM invoker: /home/ganesh/Documents/jdk-22/bin/java
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, single-shot each
# Timeout: 60 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: io.github.theuntamed839.BenchmarkFreshRead.randomSearch
# Parameters: (dbProvider = LEVELDB_NATIVE, entryCount = 5000000, keySize = 500, valueSize = 500)

# Run progress: 75.00% complete, ETA 00:13:16
# Fork: 1 of 1
# Warmup Iteration   1: NativeLevelDBAdaptor_c5e8f43f-6dc2-4cb3-abc8-b8db0e86284e Folder size: 5021
107.403 s/op
Iteration   1: NativeLevelDBAdaptor_4849d9e1-6360-47c5-896c-ee23fc0a4d06 Folder size: 5021
109.559 s/op



# Run complete. Total time: 01:08:56

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                          (dbProvider)  (entryCount)  (keySize)  (valueSize)  Mode  Cnt    Score   Error  Units
BenchmarkFreshRead.randomSearch     DATASTORE4J       5000000        500          500    ss        72.444           s/op
BenchmarkFreshRead.randomSearch         ROCKSDB       5000000        500          500    ss        75.743           s/op
BenchmarkFreshRead.randomSearch    LEVELDB_JAVA       5000000        500          500    ss       353.250           s/op
BenchmarkFreshRead.randomSearch  LEVELDB_NATIVE       5000000        500          500    ss       109.559           s/op

Benchmark result is saved to BenchmarkFreshRead.json
